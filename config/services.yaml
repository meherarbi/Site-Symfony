# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

parameters:
    app.upload_directory: '%kernel.project_dir%/public/uploads'
    paypal_client_id: '%env(PAYPAL_CLIENT_ID)%'
    paypal_secret: '%env(PAYPAL_SECRET)%'
    paypal_mode: '%env(PAYPAL_MODE)%'
    paypal_cainfo: 'C:\laragon\etc\ssl\cacert.pem' # Correction : Nom du paramètre en underscore pour éviter les erreurs

services:
    # Configuration par défaut pour tous les services
    _defaults:
        autowire: true  # Injecte automatiquement les dépendances
        autoconfigure: true  # Enregistre automatiquement les services (commands, event subscribers, etc.)
        bind:
            $paypalClientId: '%paypal_client_id%'
            $paypalSecret: '%paypal_secret%'
            $paypalMode: '%paypal_mode%'
            $paypalCAInfo: '%paypal_cainfo%' # Correction : Assurer l'injection correcte du certificat SSL

    # Déclaration explicite du service PayPalService
    App\Service\PayPalService:
        arguments:
            $paypalClientId: '%paypal_client_id%'
            $paypalSecret: '%paypal_secret%'
            $paypalMode: '%paypal_mode%'
            $paypalCAInfo: '%paypal_cainfo%' # Correction : Injection explicite
        public: true  # Force Symfony à garder le service disponible

    App\Twig\AppExtension:
        tags: [ "twig.extension" ]

    App\Service\FileUploader:
        arguments:
            - '%app.upload_directory%'

    App\EventListener\RemoveXRobotsTagSubscriber:
        tags:
            - { name: kernel.event_subscriber }

    # Inclut tous les services dans src/, sauf les exceptions listées
    App\:
        resource: "../src/"
        exclude:
            - "../src/DependencyInjection/"
            - "../src/Entity/"
            - "../src/Kernel.php"
            - "../src/Tests/"

    # Déclaration des contrôleurs pour l'injection de dépendances
    App\Controller\:
        resource: "../src/Controller/"
        tags: [ "controller.service_arguments" ]

    # Configuration FOS Elastica pour la recherche avancée
    fos_elastica.index.products.product:
        class: FOS\ElasticaBundle\Elastica\Index
        factory: [ '@fos_elastica.client', getIndex ]
        arguments:
            - 'products'

    app.elastica_to_model_transformer:
        class: FOS\ElasticaBundle\Doctrine\ORM\ElasticaToModelTransformer
        arguments:
            - '@doctrine'
            - 'App\Entity\Product'
            - []  # Options supplémentaires

    app.product_finder:
        class: FOS\ElasticaBundle\Finder\TransformedFinder
        arguments:
            - '@fos_elastica.index.products.product'
            - '@app.elastica_to_model_transformer'

    # Configuration du service ElasticsearchService
    App\Service\ElasticsearchService:
        arguments:
            $client: '@fos_elastica.client.default'
            $productFinder: '@app.product_finder'
